/* gawkmisc.c --- miscellaneous gawk routines that are OS specific. -*-C-*- */

/* 
 * Copyright (C) 1986, 1988, 1989, 1991 - 2003, 2012, 2016-2019,
 * the Free Software Foundation, Inc.
 * 
 * This file is part of GAWK, the GNU implementation of the
 * AWK Progamming Language.
 * 
 * GAWK is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GAWK is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

char quote = '\'';
char envsep = ';';

# ifdef DEFPATH
const char *defpath = DEFPATH;
# else
const char *defpath = ".;c:\\lib\\awk;c:\\gnu\\lib\\awk";
# endif
/* the Makefile should define DEFLIBPATH */
const char *deflibpath = DEFLIBPATH;

#ifdef __EMX__
#include<io.h>

static int _os2_is_abs_path(const char *dirname);
static char* _os2_unixroot(const char *path);
static const char* _os2_unixroot_path(const char *path);
#endif /* __EMX__ */

#ifdef WINDOWS_NATIVE
#ifdef HAVE_SOCKETS
#include "socket.h"

#undef socket
#undef setsockopt
#undef bind
#undef connect
#undef listen
#undef accept
#undef recvfrom
#undef shutdown
#endif /* HAVE_SOCKETS */

#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include "mscrtx/arg_parser.h"
#include "mscrtx/utf8env.h"
#include "mscrtx/locale_helpers.h"
#include "mscrtx/localerpl.h"
#endif /* WINDOWS_NATIVE */

#ifdef WINDOWS_NATIVE
#define close(fd)		_close(fd)
#define lseek(fd, off, set)	_lseek(fd, off, set)
#define setmode(fd, mode)	_setmode(fd, mode)
#define isatty(fd)		_isatty(fd)
#endif

#if ! defined(S_ISREG) && defined(S_IFREG)
#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#endif

#if ! defined(S_ISDIR) && defined(S_IFDIR)
#define	S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
#endif

#ifdef WINDOWS_NATIVE
/* S_IFSOCK is non-standard for Windows.  */
#if ! defined(S_IFSOCK)
#define S_IFSOCK (S_IFREG | S_IFDIR)
#endif
#endif /* WINDOWS_NATIVE */

#if ! defined(S_IFIFO) && defined(_S_IFIFO)
#define S_IFIFO _S_IFIFO
#endif

/* gawk_name --- pull out the "gawk" part from how the OS called us */

const char *
gawk_name(const char *filespec)
{
	static char name_buf[128];
	const char *p = filespec, *q;
	size_t name_len;

	/* OS/2 allows / for directory separator too */
	if ((q = strrchr(p, '\\')) != NULL)
		p = q + 1;
	if ((q = strrchr(p, '/')) != NULL)
		p = q + 1; /* support mixed d:\foo\bar/gawk.exe */
	if ((q = strchr(p, '.')) == NULL)
		q = strchr(p, '\0');

	name_len = (size_t) (q - p);
	if (name_len == 0)
		goto dfl;

#ifndef WINDOWS_NATIVE

	if (name_len >= sizeof(name_buf))
		goto dfl;

	memcpy(name_buf, p, name_len);
	name_len[name_len] = '\0';
	return strlwr(name_buf);

#else /* WINDOWS_NATIVE */

	{
		/* Convert name to lower case.  */
		mbstate_t s = {
#ifndef __cplusplus
			0
#endif
		};
		char *d = name_buf;
		const size_t mx = (size_t) MB_CUR_MAX;
		do {
			unsigned wi;
			size_t n = mbrtoc32(&wi, p, name_len, &s);
			if (n == 0 || n == (size_t)-1 || n == (size_t)-2)
				goto dfl;
			p += n;
			name_len -= n;
			wi = c32tolower(wi);
			if (sizeof(name_buf) - (size_t) (d - name_buf) <= mx)
				goto dfl;
			n = c32rtomb(d, wi, &s);
			if (n == 0 || n == (size_t)-1 || n == (size_t)-2)
				goto dfl;
			d += n;
		} while (name_len);
		*d = '\0';
		return name_buf;
	}

#endif /* WINDOWS_NATIVE */

dfl:
	return "gawk";
}


#ifdef HAVE_MEMCPY_ULONG

/*
 * memcpy_long() & memset_ulong() are 32-bit replacements for MSC which
 * has a 16-bit size_t.
 */
char *
memcpy_ulong (dest, src, l)
register char *dest;
register const char *src;
register unsigned long l;
{
	register char *ret = dest;

	while (l--)
		*dest++ = *src++;

	return ret;
}

#endif /* HAVE_MEMCPY_ULONG */


#ifdef HAVE_MEMSET_ULONG

void *
memset_ulong(dest, val, l)
void *dest;
register int val;
register unsigned long l;
{
	register char *ret = dest;
	register char *d = dest;

	while (l--)
		*d++ = val;

	return ((void *) ret);
}

#endif /* HAVE_MEMSET_ULONG */


/* os_arg_fixup --- fixup the command line */

void
os_arg_fixup(int *argcp, char ***argvp)
{
#ifdef __EMX__
# ifdef initialize_main
	initialize_main(argcp, argvp);
# else
	_wildcard(argcp, argvp);
	_response(argcp, argvp);
# endif

	setvbuf(stdout, NULL, _IOLBF, BUFSIZ);
	defpath = _os2_unixroot_path(defpath);
#endif /* __EMX__ */
	(void) argcp, (void) argvp;
	return;
}

/* os_devopen --- open special per-OS devices */

fd_t
os_devopen(const char *name, int flag)
{
#ifdef __EMX__
	/* do not use open(name, flag) here !!! */
	return -1;
#else
	if (strcmp(name, "/dev/null") == 0)
		return open("NUL", flag);
	/* FIXME: */
	/* else if (strcmp(name, "/dev/tty") == 0)
	 * 	return open("???", flag);
	 */
	return -1;
#endif
}

/* optimal_bufsize --- determine optimal buffer size */

size_t
optimal_bufsize(fd_t fd, gawk_xstat_t *stb)
{
	/* force all members to zero in case OS doesn't use all of them. */
	memset(stb, '\0', sizeof(*stb));

	/*
	 * DOS doesn't have the file system block size in the
	 * stat structure. So we have to make some sort of reasonable
	 * guess. We use stdio's BUFSIZ, since that is what it was
	 * meant for in the first place.
	 */
#define	DEFBLKSIZE	BUFSIZ

	if (os_xfstat(fd, stb) == -1)
		fatal("can't stat fd %d (%s)", fd, strerror(errno));
	if (S_ISREG(stb->st_mode)
	    && 0 < stb->st_size && stb->st_size < DEFBLKSIZE) /* small file */
		return (size_t) stb->st_size;
	return DEFBLKSIZE;
}

/* ispath --- return true if path has directory components */

bool
ispath(const char *file)
{
#ifdef __EMX__
	return (strpbrk(file, "/\\") != NULL ||
		(toupper(file[0]) >= 'A' && toupper(file[0]) <= 'Z' && file[1] == ':'));
#else
	for (; *file; file++) {
		switch (*file) {
		case '/':
		case '\\':
		case ':':
			return true;
		}
	}
	return false;
#endif
}

/* isdirpunct --- return true if char is a directory separator */

bool
isdirpunct(int c)
{
	return (strchr(":\\/", c) != NULL);
}

#ifdef WINDOWS_NATIVE
static HANDLE osf_to_handle(const intptr_t h)
{
#if 0
#ifndef __cplusplus
#if defined __GNUC__ && __GNUC__ >= 6
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbad-function-cast" /* cast from function call of type 'intptr_t' {aka 'long long int'} to non-matching type 'void *' */
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast" /* cast from function call of type 'intptr_t' (aka 'int') to non-matching type 'HANDLE' (aka 'void *') */
#endif
#endif
#endif
	return (HANDLE)h;
#if 0
#ifndef __cplusplus
#if defined __GNUC__ && __GNUC__ >= 6
#pragma GCC diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#endif
#endif
}
#endif

/* os_close_on_exec --- set close on exec flag, print warning if fails */

void
os_close_on_exec(fd_t fd, const char *name, const char *what, const char *dir)
{
#if (defined(__DJGPP__) && (__DJGPP__ > 2 || __DJGPP_MINOR__ >= 4)) || defined __EMX__
	if (fd <= 2)	/* sanity */
		return;

	if (fcntl(fd, F_SETFD, 1) < 0)
		warning("%s %s `%s': could not set close-on-exec: %s",
			what, dir, name, strerror(errno));
#endif
#ifdef WINDOWS_NATIVE
	HANDLE fh;
	SOCKET s = valid_socket (fd);
	if (s != INVALID_SOCKET)
		fh = (HANDLE)s;
	else
		fh = osf_to_handle(_get_osfhandle(fd));
	if (fh != INVALID_HANDLE_VALUE)
		SetHandleInformation(fh, HANDLE_FLAG_INHERIT, 0);
#endif
	(void) name, (void) what, (void) dir;
}

/* os_isdir --- is this an fd on a directory? */

bool
os_isdir(fd_t fd)
{
	gawk_stat_t sbuf;

	return (os_fstat(fd, &sbuf) == 0 && S_ISDIR(sbuf.st_mode));
}

/* os_isreadable --- fd can be read from */

bool
os_isreadable(const awk_input_buf_t *iobuf, bool *isdir)
{
	*isdir = false;

	switch (awk_input_buf_get_stat(iobuf)->st_mode & S_IFMT) {
	case S_IFREG:
	case S_IFCHR:	/* ttys, /dev/null, .. */
#ifdef S_IFSOCK
	case S_IFSOCK:
#endif
#ifdef S_IFIFO
	case S_IFIFO:
#endif
		return true;
	case S_IFDIR:
		*isdir = true;
		/* fall through */
	default:
		return false;
	}
}

/* os_is_setuid --- true if running setuid root */

bool
os_is_setuid(void)
{
#ifdef __EMX__
      	long uid, euid;

	uid = getuid();
	euid = geteuid();

	return (euid == 0 && euid != uid);
#else
	return false;
#endif
}

/* os_setbinmode --- set binary mode on file */

#ifdef __DJGPP__
#include <sys/exceptn.h>
#include <io.h>
#endif
static int orig_tty_mode = -1;

int
os_setbinmode(fd_t fd, int mode)
{
	int prev_mode;

#ifdef WINDOWS_NATIVE
	if (is_socket(fd)) {
		/* Only O_BINARY mode is supported.  */
		assert(mode == O_BINARY);
		return O_BINARY;
	}
#endif

	prev_mode = setmode(fd, mode);

#ifdef __DJGPP__
	if ((mode & O_BINARY) != 0)
		__djgpp_set_ctrl_c(1); /* allow to interrupt with Ctrl-C */
#endif
	/* Save the original tty mode as we found it.  */
	if (orig_tty_mode == -1 && fd >= 0 && fd <= 2)
		orig_tty_mode = prev_mode;
	return prev_mode;
}

/* os_restore_mode --- restore the original mode of the console device */

void
os_restore_mode(fd_t fd)
{
#ifdef WINDOWS_NATIVE
	if (is_socket(fd))
		return;
#endif
	if (orig_tty_mode != -1)
		(void) setmode(fd, orig_tty_mode);
}

/* os_isatty --- return true if fd is a tty */

bool
os_isatty(fd_t fd)
{
#ifdef WINDOWS_NATIVE
	if (is_socket(fd))
		return false;
#endif
	if (!isatty(fd))
		return false;
#ifdef WINDOWS_NATIVE
	if (lseek(fd, SEEK_CUR, 0) != -1)
		return false;
#endif
	return true;
}

/* files_are_same --- return true if files are identical */

bool
files_are_same(const char *path, SRCFILE *src)
{
#ifndef WINDOWS_NATIVE
	struct stat st;
	size_t pathlen;
	char *p, *s;

	if (stat (path, & st) == 0) {
		/* If they have a working `stat', honor that.  */
		if (!(st.st_dev == src->sbuf.st_dev
		      && st.st_ino == src->sbuf.st_ino))
			return false;

		/* Compare modification times.  */
		if (st.st_mtime != src->mtime)
			return false;

		/* Compare absolute file names case-insensitively, and
		   treat forward- and back-slashes as equal.  */
		pathlen = strlen(path);
		for (p = path, s = src->fullpath;
		     p <= path + pathlen;
		     p++, s++) {
			if (tolower(*p) != tolower(*s)
			    && !((*p == '/' || *p == '\\')
				 && (*s == '/' || *s == '\\')))
				return false;
		}
		return true;
	}
	return false;
#else /* WINDOWS_NATIVE */
	gawk_xstat_t st;
	return
		os_xstat (path, & st) == 0 &&
		st.st_dev == src->sbuf.st_dev &&
		st.st_ino == src->sbuf.st_ino &&
		st.st_mtime == src->mtime;
#endif /* WINDOWS_NATIVE */
}


#ifdef __EMX__ 
# ifndef PATH_SEPARATOR
#  define PATH_SEPARATOR ';'
# endif

/* result is 0 if dirname is no absolute path, 1 otherwise */

static int
_os2_is_abs_path(const char *dirname)
{
  int result = 0;
  if (dirname != NULL && dirname[0] != '\0') {
    /* if dirname contains a valid drive letter like "c:" */
    if (((dirname[0] >= 'A' && dirname[0] <= 'Z') || (dirname[0] >= 'a' && dirname[0] <= 'z'))
        && dirname[1] == ':') dirname += 2; /* remove the drive letter */

    if (dirname[0] == '/' || dirname[0] == '\\') result = 1; /* asbolute path */
  }

  return result;
}


/* path is assumed to be a list of directories separated by PATH_SEPARATOR.
   This function determines if the first directory of path is on the
   drive specified by the environment variable UNIXROOT.
   If it is the case, NULL is returned, otherwise a new directory name
   is allocated using the drive letter from UNIXROOT and returned as result.
   If the first directory is a relative path NULL is returned, too.
   The new directory name is allocated by malloc().
   Example (UNIXROOT is set to "e:"):
     "c:/usr/share" -> "e:/usr/share"
     "e:/usr/share" -> NULL             (already on the $UNIXROOT drive)
     "/usr/share"   -> "e:/usr/share"
     "."            -> NULL             (not an absolute path)
     "usr/share"    -> NULL             (not an absolute path)
     "c:usr/share"  -> NULL             (not an absolute path)
     "c:/usr/share;d:/etc" -> "e:/usr/share" (only the first directory in path is used) */

static char*
_os2_unixroot(const char *path)
{
  static const char *unixroot = NULL;
  static int unixroot_init = 0; 
  char *result = NULL; 

  if (unixroot_init == 0) {
    /* get $UNIXROOT only one time */
    unixroot = getenv("UNIXROOT");

    /* check whether unixroot is valid (must be "x:") */
    if (unixroot != NULL) {
      int drive = toupper(unixroot[0]);
      if (drive < 'A' || drive > 'Z' || unixroot[1] != ':' || unixroot[2] != '\0')
        unixroot = NULL; /* unixroot not valid */
    }

    unixroot_init = 1; /* initialized */
  }

  /* note: if unixroot != NULL then it contains a valid drive letter */
  if (unixroot != NULL && _os2_is_abs_path(path)) {
    /* dirname is an absolute path and unixroot is a drive letter, "c:" for example */
    size_t old_path_len = strlen(path);

    /* end points to the first ';' in path or to NULL */
    const char *end = strchr(path, PATH_SEPARATOR);

    /* dir_len is the length of the first directory in path */
    size_t dir_len = (end) ? end - path : old_path_len;

    if (toupper(unixroot[0]) != toupper(path[0]) || path[1] != ':') {
      /* the first directory of path does not start with the string $UNIXROOT */
      if (path[1] == ':') {
        /* if there is a drive letter remove it */
        dir_len -= 2;
        path += 2;
      } 

      result = malloc(dir_len + 3);
      if (result) { /* do nothing if we are out of memory */
        result[0] = unixroot[0];
        result[1] = unixroot[1];
        memcpy(result + 2, path, dir_len);
        result[dir_len + 2] = '\0';
      }
    }
  }
  return result;
}

/* path is assumed to be a list of directories separated by PATH_SEPARATOR.
   Every directory is processed. _os2_unixroot() is used to find out whether
   these directories are on the drive specified by the environment variable
   UNIXROOT. If this is not the case the same directory on the UNIXROOT drive
   is added to the end of path. If path is a valid path this function returns a valid path, too.
   Example ($UNIXROOT is set to "e:"):
   ".;c:/usr/local;d:/usr/local;d:/etc;e:/etc"
   -> ".;c:/usr/local;d:/usr/local;d:/etc;e:/etc;e:/usr/local;e:/usr/local;e:/etc" */

static const char*
_os2_unixroot_path(const char *path)
{
  char *result = NULL;
  const char *p = path;
  unsigned dir_count = 1;

  if (path == NULL || path[0] == '\0') return NULL; /* empty path */

  /* save number of path components in dir_count */
  while(*p) {
    if (*p++ == PATH_SEPARATOR && *p != '\0' && *p != PATH_SEPARATOR)
      dir_count += 1;
  }

  {
    const char *list[dir_count]; /* list of char pointers */
    size_t dir_len[dir_count]; /* the according directory length */
    size_t old_path_len = strlen(path); /* the old path length */
    size_t total_len;
    unsigned i = 0;

    if (path[old_path_len - 1] == PATH_SEPARATOR) /* last character is ';' */
      old_path_len--;

    list[0] = p = path; /* first directory */

    while(*p) {
    if (*p++ == PATH_SEPARATOR && *p != '\0' && *p != PATH_SEPARATOR)
      list[++i] = p;
    }
    /* now list[i] contains the ith directory of path (no 0-terminated strings!!!) */

    /* determine the total length for the new path */
    total_len = old_path_len;

    for(i = 0; i < dir_count; i++) {
      list[i] = _os2_unixroot(list[i]);
      if (list[i] != NULL) {
        dir_len[i] = strlen(list[i]);
        total_len += dir_len[i] + 1; /* one character for ';' or '\0' */
      }
      else dir_len[i] = 0;
    }
    /* now list[] contains the according directories on the UNIXROOT drive or NULL
       total_len contains the total length for the new path */
    result = malloc(total_len + 1);

    if (result) {
      /* copy the old path and the new directories into the new path */
      char *q = result;
      memcpy(q, path, old_path_len);
      q += old_path_len;

      for(i = 0; i < dir_count; i++) {
        if (dir_len[i] != 0) {
          *q++ = PATH_SEPARATOR;
          memcpy(q, list[i], dir_len[i]);
          q += dir_len[i];
        }
      }

      *q = '\0'; /* terminating '\0' */
    }

    for(i = 0; i < dir_count; i++) free((void*) list[i]);
  }

  return (result) ? (const char*) result : path;
}

/* limit a length of DLL name up to 8 characters. If dst is not enough for
   a fixed dll name, it is truncated. */
char *os2_fixdllname(char *dst, const char *src, size_t n)
{
    char drive[_MAX_DRIVE];
    char dir[_MAX_DIR];
    char name[_MAX_FNAME];
    char ext[_MAX_EXT];
    char dll_file[_MAX_PATH];

    _splitpath(src, drive, dir, name, ext);
    if (strlen(name) > 8)
        name[8] = '\0';
    _makepath(dll_file, drive, dir, name, ext);

    strncpy(dst, dll_file, n);
    dst[n - 1] = '\0';

    return dst;
}

#ifdef __KLIBC__

/* replacement of dlopen(). This limits a length of a base name up to 8
   characters. */
void *os2_dlopen(const char *file, int mode)
{
    char dll_file[strlen(file) + 1];

    return (dlopen)(os2_fixdllname(dll_file, file, sizeof(dll_file)), mode);
}

/* replacement of dlsym(). This prepends '_' to name. */
void *os2_dlsym(void *handle, const char *name)
{
    char sym[strlen(name) + 1 + 1]; /* 1 for '_', 1 for NUL */

    sym[0] = '_';
    strcpy(sym + 1, name);

    return (dlsym)(handle, sym);
}

#endif /* __KLIBC__ */

#endif /* __EMX__ */

#ifdef WINDOWS_NATIVE

/* MinGW 3.21 and later defines usleep as an inline function in
   unistd.h, which conflicts with the version below.  */
#if defined(_MSC_VER) || (__MINGW32_MAJOR_VERSION + (__MINGW32_MINOR_VERSION > 20) < 4)
int
usleep(unsigned int usec)
{
  DWORD msec = (DWORD) (usec / 1000);
  usec %= 1000;

  Sleep (msec);

  return (int) usec;
}
#endif

/* On Posix systems, 'setlocale' looks at LC_* variables in the
   environment, and Gawk users might expect that on Windows as well.  */
void
pc_set_locale(const char *def)
{
	struct set_locale_err err;
	if (set_locale_from_env(def, &err)) {
		if (err.lc)
			fwprintf(stderr, L"Bad locale: %ls=%ls\n", err.cat, err.lc);
		else
			fwprintf(stderr, L"Failed to set default locale\n");
		(void) fflush(stderr);
		gawk_exit(EXIT_FATAL);
	}
}

/* Replacement for the missing nl_langinfo.  Only CODESET is currently
   supported.  */
#include <langinfo.h>

const char *
nl_langinfo (int item)
{
  switch (item)
    {
      case CODESET:
        {
          /* Reworked Gnulib's implementation of nl_langinfo:
             - Gnulib's implementation is unnecessarily complex,
             - Gnulib's implementation doesn't handle UTF-8 code page.  */
          static char buf[2 + 10 + 1] = "CP";
          const char *locale = setlocale (LC_CTYPE, NULL);
          const char *codeset = "";
          const char *codeset_end = codeset;

          if (locale && locale[0])
            {
              /* If the locale name contains an encoding after the
                 dot, return it.  */
              const char *dot = strchr (locale, '.');

              if (dot)
                {
                  codeset = dot + 1;

                  /* Look for the possible @... trailer and remove it,
                     if any.  */
                  codeset_end = strchr (codeset, '@');
                  if (! codeset_end)
                    codeset_end = strchr (codeset, '\0');

                  /* Check if codeset is UTF8 */
                  if ((codeset[0] == 'u' || codeset[0] == 'U') &&
                      (codeset[1] == 't' || codeset[1] == 'T') &&
                      (codeset[2] == 'f' || codeset[2] == 'F') &&
                      ((codeset[3] == '8' && codeset + 4 == codeset_end) ||
                       (codeset[3] == '-' && codeset[4] == '8' &&
                        codeset + 5 == codeset_end)))
                    {
                      return "UTF-8";
                    }
                }
            }

          /* If setlocale is successful, it returns the number of the
             codepage, as a string.  Otherwise, fall back on Windows
             API GetACP, which returns the locale's codepage as a
             number (although this doesn't change according to what
             the 'setlocale' call specified).  Either way, prepend
             "CP" to make it a valid codeset name.  */
          {
            size_t codesetlen = (size_t) (codeset_end - codeset);
            if (0 < codesetlen && codesetlen < sizeof(buf) - 2)
              ((char*) memcpy (buf + 2, codeset, codesetlen))[codesetlen] = '\0';
            else
              sprintf (buf + 2, "%u", GetACP ());
          }

          return buf;
        }
      default:
        return "";
    }
}

int w32_execvp(const char *, char **);

/*
 * On MS-Windows with MinGW, execvp causes the shell and the re-exec'ed
 * gawk to compete for the keyboard input.
 *
 * This will need work if we ever need a real version of execvp.
 */
int w32_execvp(const char *file, char **argv)
{
	if (spawnvp(_P_WAIT, file, (const char * const *)argv) != -1)
		exit(EXIT_SUCCESS);
	return -1;
}

#ifdef DYNAMIC

#include <winerror.h>
#include <dlfcn.h>

static DWORD dllast_err;

void *
dlopen (const char *file, int mode)
{
  wchar_t dllfn_buf[MAX_PATH + 2/*red zone*/], *dllfn, *p;
  HANDLE dllhandle;

  if (mode != RTLD_LAZY)
    {
      errno = EINVAL;
      dllast_err = ERROR_INVALID_PARAMETER;
      return NULL;
    }

  dllfn = xpathwc (file, dllfn_buf, sizeof(dllfn_buf)/sizeof(dllfn_buf[0]));
  if (dllfn == NULL)
    {
      if (errno == EILSEQ || errno == ENAMETOOLONG)
        dllast_err = ERROR_INVALID_NAME;
      return NULL;
    }

  /* MSDN says to be sure to use backslashes in the DLL file name.  */
  for (p = dllfn; *p; p++)
    if (*p == L'/')
      *p = L'\\';

  dllhandle = LoadLibraryW (dllfn);
  if (!dllhandle)
    dllast_err = GetLastError ();

  if (dllfn != dllfn_buf)
    free (dllfn);

  return dllhandle;
}

static const char *
format_msg (int ecode, char buf[], unsigned int buf_size)
{
  WCHAR *wbuf = NULL;

  for (;;) {
    DWORD ret;
    size_t n;
    void *const pwbuf = &wbuf;

    if (buf_size <= 1)
      break;

    ret = FormatMessageW (FORMAT_MESSAGE_ALLOCATE_BUFFER
			  | FORMAT_MESSAGE_FROM_SYSTEM
			  | FORMAT_MESSAGE_IGNORE_INSERTS,
			  NULL, (DWORD) ecode, 0, (LPWSTR) pwbuf, 0, NULL);
    if (wbuf == NULL)
      break;

    while (ret > 0 && (wbuf[ret - 1] == L'\n' || wbuf[ret - 1] == L'\r'))
      --ret;

    if (ret == 0)
      break;

    wbuf[ret] = L'\0';

    /* e.g. convert to UTF-8 */
    n = wcstombs (buf, wbuf, buf_size - 1);
    if (n == (size_t)-1)
      break;

    buf[n] = '\0';
    goto ok;
  }

  if (buf_size > 0) {
    (void) _snprintf (buf, buf_size, "Error code %d", ecode);
    buf[buf_size - 1] = '\0';
  }

ok:
  if (wbuf != NULL)
    LocalFree(wbuf);

  return buf;
}

const char *
dlerror_buf (char buf[], unsigned int buf_size)
{
  int err = (int) dllast_err;
  if (!err)
    return NULL;

  dllast_err = 0;
  return format_msg (err, buf, buf_size);
}

int
dlclose (void *handle)
{
  if (!handle || handle == INVALID_HANDLE_VALUE)
    return -1;
  if (!FreeLibrary ((HMODULE)handle))
    return -1;

  return 0;
}

void *
dlsym (void *handle, const char *name)
{
  FARPROC addr = NULL;

  if (!handle || handle == INVALID_HANDLE_VALUE)
    {
      dllast_err = ERROR_INVALID_PARAMETER;
      return NULL;
    }

  addr = GetProcAddress ((HMODULE)handle, name);
  if (!addr)
    dllast_err = GetLastError ();

  return (void *)addr;
}

#endif	/* DYNAMIC */

int os_fstat(int fd, gawk_stat_t *buf)
{
#ifdef HAVE_SOCKETS
  if (is_socket(fd)) {
    memset(buf, 0, sizeof(*buf));
    buf->st_mode = S_IFSOCK;
    buf->st_dev = (dev_t)-1;
    return 0;
  }
#endif
  return _fstat64(fd, buf);
}

int os_xfstat(int fd, gawk_xstat_t *buf)
{
#ifdef HAVE_SOCKETS
  if (is_socket(fd)) {
    memset(buf, 0, sizeof(*buf));
    buf->st_mode = S_IFSOCK;
    buf->st_dev = (xdev_t)-1;
    return 0;
  }
#endif
  return xfstat(osf_to_handle(_get_osfhandle(fd)), NULL, buf);
}

#ifdef HAVE_SOCKETS

SOCKET
fd_to_socket(int fd)
{
  if (is_socket(fd))
    return socket_fd_get(fd);
  return INVALID_SOCKET;
}

int
socket_to_fd(SOCKET s)
{
  if (s != INVALID_SOCKET)
    return socket_fd_attach(s);
  return INVALID_HANDLE;
}

int
w32_socket(int family, int type, int protocol)
{
  /* We need to use WSASocket rather than socket, since the latter
     creates overlapped sockets that cannot be used in file I/O
     APIs.  */
  SOCKET s = WSASocket (family, type, protocol, NULL, 0, 0);

  if (s == INVALID_SOCKET)
    {
      switch (WSAGetLastError ())
	{
	  case WSAEMFILE:
	    errno = EMFILE;
	    break;
	  case WSANOTINITIALISED:
	  case WSAENETDOWN:
	    errno = EACCES;
	    break;
	  case WSAENOBUFS:
	    errno = ENOMEM;
	    break;
	  case WSAEFAULT:
	    errno = EFAULT;
	    break;
	  default:
	    errno = EINVAL;
	    break;
	}
      return INVALID_HANDLE;
    }

  {
    int fd = socket_to_fd (s);
    if (fd == INVALID_HANDLE)
      closesocket (s);
    return fd;
  }
}

int
w32_setsockopt (int fd, int level, int optname, const char *optval, int optlen)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return setsockopt (s, level, optname, optval, optlen);
}

int
w32_bind (int fd, const struct sockaddr *name, int namelen)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return bind (s, name, namelen);
}

int
w32_connect (int fd, const struct sockaddr *name, int namelen)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return connect (s, name, namelen);
}

int
w32_listen (int fd, int backlog)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return listen (s, backlog);
}

int
w32_accept (int fd, struct sockaddr *addr, int *addrlen)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return socket_to_fd (accept (s, addr, addrlen));
}

SOCKET
valid_socket (int fd)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return s;
}

int
w32_closemaybesocket (int fd)
{
  int res;

  if (is_socket (fd)) {
    int res2 = socket_fd_close (fd);
    res = res2 == SOCKET_ERROR ? -1 : 0;
  }
  else
    res = close (fd);

  return res;
}

int
w32_recvfrom (int fd, char *buf, int len, int flags,
	      struct sockaddr *from, int *fromlen)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return recvfrom (s, buf, len, flags, from, fromlen);
}

int
w32_shutdown (int fd, int how)
{
  SOCKET s = FD_TO_SOCKET (fd);

  return shutdown (s, how);
}

const char *
gai_strerror_buf (int ecode, char buf[], unsigned int buf_size)
{
  return format_msg (ecode, buf, buf_size);
}

#endif	/* HAVE_SOCKETS */

/* Translate abnormal exit status of Windows programs into the signal
   that terminated the program.  This is required to support scm_kill
   and WTERMSIG.  */

#include <signal.h>

struct signal_and_status {
  int sig;
  unsigned status;
};

static const struct signal_and_status sigtbl[] = {
  {SIGSEGV, 0xC0000005},	/* access to invalid address */
  {SIGSEGV, 0xC0000008},	/* invalid handle */
  {SIGILL,  0xC000001D},	/* illegal instruction */
  {SIGILL,  0xC0000025},	/* non-continuable instruction */
  {SIGSEGV, 0xC000008C},	/* array bounds exceeded */
  {SIGFPE,  0xC000008D},	/* float denormal */
  {SIGFPE,  0xC000008E},	/* float divide by zero */
  {SIGFPE,  0xC000008F},	/* float inexact */
  {SIGFPE,  0xC0000090},	/* float invalid operation */
  {SIGFPE,  0xC0000091},	/* float overflow */
  {SIGFPE,  0xC0000092},	/* float stack check */
  {SIGFPE,  0xC0000093},	/* float underflow */
  {SIGFPE,  0xC0000094},	/* integer divide by zero */
  {SIGFPE,  0xC0000095},	/* integer overflow */
  {SIGILL,  0xC0000096},	/* privileged instruction */
  {SIGSEGV, 0xC00000FD},	/* stack overflow */
  {SIGTERM, 0xC000013A},	/* Ctrl-C exit */
  {SIGINT,  0xC000013A}
};

int
w32_status_to_termsig (unsigned status)
{
  unsigned i;

  for (i = 0; i < sizeof (sigtbl) / sizeof (sigtbl[0]); i++)
    if (status == sigtbl[i].status)
      return sigtbl[i].sig;

  return SIGTERM;
}

void
w32_maybe_set_errno (void)
{
  DWORD w32err = GetLastError ();

  switch (w32err)
    {
      /* When stdout is redirected to a pipe, and the program that
	 reads the pipe (e.g., a pager) exits, Windows doesn't set
	 errno to a useful value.  Help it DTRT.  */
      case ERROR_BAD_PIPE:
      case ERROR_PIPE_BUSY:
      case ERROR_NO_DATA:
      case ERROR_PIPE_NOT_CONNECTED:
	errno = EPIPE;
	break;
      default:
	errno = EINVAL;
	break;
    }
}

#endif	/* WINDOWS_NATIVE */


#if defined(__DJGPP__) || defined(__EMX__) || defined(WINDOWS_NATIVE)

void
init_sockets(void)
{
#if defined(HAVE_SOCKETS) && !defined(__EMX__)
  WSADATA  winsockData;
  int errcode;

  if ((errcode = WSAStartup (0x101, &winsockData)) != 0
      || winsockData.wVersion != 0x101)
    fatal(_("cannot start Winsock (%d)"), errcode);
#endif
}

#endif	/* __DJGPP__ || __EMX__ || WINDOWS_NATIVE */


#ifdef __DJGPP__

/* Replacement for the missing nl_langinfo.  DJGPP provides only C locale.  */
#include <langinfo.h>

const char *
nl_langinfo (int item)
{
  switch (item)
    {
      case CODESET:
      default:
        return "";
    }
}

# if __DJGPP__ == 2 && __DJGPP_MINOR__ < 4 
int
unsetenv (const char *name)
{
  if (!name || !*name || strchr (name, '=') != NULL)
    return -1;

  return putenv (name);
}
#endif

/* This is needed to defeat too-clever GCC warnings in dfa.c about
   comparison being always false due to limited range of data type.  */
wint_t
btowc (int c)
{
  return c;
}

wint_t
putwc(wchar_t wc, FILE *stream)
{
  return MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX
         && putc((unsigned char)wc, stream) != EOF ? (wint_t)wc : WEOF;
}

#endif /* __DJGPP__ */


#ifdef WINDOWS_NATIVE

/* Array of multibyte program args converted from Unicode.  */
static char **gawk_argv = NULL;

/* Convert program arguments from wide-char to multibyte
  according to current locale codepage.  */
char **
convert_wargv(int argc, struct wide_arg *wargs)
{
	struct arg_convert_err err;
	char **argv = arg_convert_wide_args((unsigned) argc, wargs, &err);
	if (!argv) {
		if (err.arg)
			fatal(_("failed to convert command-line argument %u (Unicode -> LC_CTYPE=%s)"),
				err.number, setlocale(LC_CTYPE, NULL));
		else
			fatal(_("failed to convert command-line arguments from wide-character strings: %s"), strerror(errno));
	}
	arg_free_wide_args(wargs);
	return (gawk_argv = argv);
}

/* Free resources.
  This is called from final_exit().  */
void
gawk_cleanup(void)
{
	if (gawk_argv)
		arg_free_argv(gawk_argv);
#ifdef HAVE_SOCKETS
	socket_fd_free_tab();
#endif
	utf8_env_shadow_reset();
}

/* needed by utf8env.c */
ATTRIBUTE_NORETURN void utf8_env_fatal(void)
{
	fatal(_("failed to create utf8 shadow environment variables table"));
}

#endif /* WINDOWS_NATIVE */
